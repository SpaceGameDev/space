plugins {
	id 'java-platform'
}

allprojects {
	group 'space.engine'
	version '1.0'
}

javaPlatform {
	allowDependencies()
}

@CacheableRule
class LwjglRule implements ComponentMetadataRule {

	def nativeVariants = [
			"natives-linux",
			"natives-windows",
			"natives-macos"
	]

	def nativeOverrides = [
			"lwjgl-vulkan": ["natives-macos"],
			"lwjgl-bom"   : []
	]

	void execute(ComponentMetadataContext context) {
		if (context.details.id.group == 'org.lwjgl') {
			context.details.allVariants {
				it.withFiles {
					def override = nativeOverrides.get(context.details.id.module.name)
					(override == null ? nativeVariants : override.findAll { nativeVariants.contains(it) }).each {
						addFile("${context.details.id.name}-${context.details.id.version}-${it}.jar")
					}
				}
			}
		}
	}
}

dependencies {
	api platform('org.lwjgl:lwjgl-bom:3.2.3')
	api 'org.jetbrains:annotations:16.0.3'
}

allprojects {
	plugins.withType(JavaLibraryPlugin.class).all {
		targetCompatibility = 1.11
		sourceCompatibility = 1.11

		repositories {
			mavenCentral()
		}

		test {
			testLogging {
				exceptionFormat = 'full'
			}
		}

		jar {
			archiveBaseName.set("space-engine${path.replace(':', '-')}")
		}

		dependencies {
			api platform(rootProject)
			implementation 'org.jetbrains:annotations'

			components {
				all LwjglRule
			}

			testImplementation 'org.hamcrest:hamcrest:2.1'
			testImplementation 'junit:junit:4.12'
		}

		configurations.all {
			(resolutionStrategy as ResolutionStrategy).dependencySubstitution { sub ->
				allprojects.each { p ->
					substitute module("$p.group:$p.name") with project(p.path)
				}
			}
		}

		task extractRuntimeClasspath(type: Sync) {
			from { configurations.compileClasspath.collect { it.isFile() ? zipTree(it) : it } }
			into { buildDir.path + "/extractRuntimeClasspath" }
			dependsOn configurations.compileClasspath
		}
	}
}